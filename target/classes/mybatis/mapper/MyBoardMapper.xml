<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  
	Mapper(매퍼)
	
	[namespace 속성]
		: 해당 mapper파일을 호출하기 위해 정의한 인터페이스의
		패키지를 포함한 풀 경로를 기술한다. 해당 인터페이스는
		컨트롤러와 mapper(DAO) 사이에서 중재자 역할을 하는 
		서비스 객체로 사용된다.
		
	[id 속성]
		: 실제 호출되는 함수명과 동일한 이름으로 기술한다.
		
	[resultType]
		: 쿼리 실행 후 반환되는 값의 타입을 명시한다.
		이때는 패키지명 포함한 풀 경로를 기술해야 한다.
		
	[parameterType]
		: 쿼리문에서 사용할 파라미터를 저장한 DTO 혹은 VO객체의
		타입을 명시한다. 패키지명을 포함한 풀 경로를 기술해야 한다.
-->

<!--  
Mapper에서의 파라미터 사용법
	
형식1]
	listPage(int s, int e) 와 같이 추상메소드를 통해
	파라미터가 전달되면 순서대로 param1, param2로 사용할 수 있다.

형식2]
	인덱스를 사용하는 방법
	순서대로 0부터 시작한다.
	샵{0}, 샵{1} , ...

형식3]
	@Param 어노테이션을 사용하는 방법
	@Param(_변수명 String 변수명) => mapper에서는 _변수명으로
	사용할 수 있다.

형식4]
	DTO와 같은 객체를 사용하는 방법
-->

<!--  
각 엘리먼트 별 반환값

select
	: select 문에 해당하는 결과를 반환한다.
	아래와 같이 int인 경우는 정수값을, DTO객체인 
	경우에는 해당 레코드를 저장한 List계열의 컬렉션으로
	반환한다.

insert
	: 입력 성공시 1, 실패시 0을 반환한다.
	만약 insert가 여러번 되더라도 성공시에는 1을 반환한다.
	
update/delete
	: 수정, 삭제에 성공한 행의 개수가 반환된다.
	조건에 따라 여러개의 레코드가 한꺼번에 적용될 수 있으므로
	0,1이 아닌 더 큰 값이 반환될수도 있다.
	실패의 경우 0이 반환된다.
	

-->

<mapper namespace="mybatis.MybatisDAOImpl"><!-- 인터페이스의 위치(패키지명을 포함한 풀경로) -->

	<!-- id는 메소드명과 동일하다. -->
	<select id="getTotalCount" resultType="int" 
		parameterType="mybatis.ParameterDTO">
		SELECT COUNT(*) FROM myboard
		
		<if test="searchTxt!=null and !searchTxt.equals('')">
			WHERE ${searchField} LIKE '%'||#{searchTxt}||'%'
		</if>
		
	</select>

	<select id="listPage" resultType="mybatis.MyBoardDTO">
		SELECT * FROM (
			SELECT Tb.*, rownum rNum FROM(
				SELECT * FROM myboard ORDER BY idx DESC
			) Tb
			
		)
		WHERE rNum BETWEEN #{param1} AND #{param2}
	</select>
	
	
	<!--  
	Mapper에서 파라미터를 처리하는 두번째 방법으로 전달되는
	순서대로 index를 사용한다. 인덱스는 0부터 시작한다.
	-->
	<select id="login" resultType="mybatis.MemberVO">
	 SELECT * FROM member WHERE id=#{0} and pass=#{1}
	</select>
	
	
	<!--  
		@Param 어노테이션에서 지정한 명칭을 사용하여
		인파라미터를 처리한다.
		일련번호는 기존 방식과 동일하게 시퀀스를 통해 부여한다
	-->
	<insert id="write">
		INSERT INTO myboard (idx, id, name, contents)
		VALUES
		(myboard_seq.nextval, #{id}, #{_name}, #{_contents} )
	</insert>
	
	<!--  
		매개변수로 전달된 DTO객체의 멤버변수명만 명시하면
		내부적으로 getter()가 호출되어 값을 얻어올 수 있다.
		(EL과 동일하다)
	-->
	<select id="view" resultType="mybatis.MyBoardDTO"
		parameterType="mybatis.ParameterDTO">
		SELECT * FROM myboard 
		WHERE idx=#{board_idx} AND id=#{user_id}
	</select>
	
	<!-- 게시물 수정하기 -->
	<update id="modify" parameterType="mybatis.MyBoardDTO">
		UPDATE myboard
		SET name=#{name}, contents=#{contents}
		WHERE idx=#{idx} AND id=#{id}
	</update>
	
	<!-- 게시물 삭제하기 -->
	<delete id="delete">
	DELETE FROM myboard
	WHERE idx=#{param1} AND id=#{param2}
	</delete>
	
	
	
</mapper>





